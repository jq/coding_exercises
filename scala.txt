val evenNumbers = List(2, 4, 6, 8, 10)
evenNumbers.foldLeft(0) { _ + _ }

val hasUpperCase = name.exists(_.isUpper)


def foldLeft(initialValue: Int, operator: (Int, Int) => Int)= { ... }


val array = new Array[String](3)
array(0) = "Hello"

array.foreach(println)


val myList = scala.collection.immutable.List("This", "is", "immutable")


val myList = "This" :: "is" :: "immutable" :: Nil

val afterDelete = newList.filterNot(_ == 3)



val files = new java.io.File(".").listFiles
for(file <- files) {
    val filename = file.getName
    if(fileName.endsWith(".scala")) println(file)
}

val aList = List(1, 2, 3)
val bList = List(4, 5, 6)
for { a <- aList; b <- bList } println(a + b)

for { a <- aList; b <- bList } yield a + b


val result = for { a <- aList; b <- bList } yield a + b
for(r <- result) println(r)


def ordinal(number:Int) = number match {
  case 1 => println("1st")
  case 2 => println("2nd")
  case 3 => println("3rd")
  case _ => println("Cannot do beyond 3")
}

def printType(obj: AnyRef) = obj match {
  case s: String => println("This is string")
  case l: List[_] => println("This is List")
  case a: Array[_] => println("This is an array")
  case d: java.util.Date => println("This is a date")
}


List(1, 2, 3, 4) match {
        case f :: s :: rest => List(f, s)
        case _ => Nil
      }



