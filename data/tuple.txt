Tuple in scala are immutable but can contain heterogeneous items
val tuple = ("test", List(1))


for comprehension
def headers = for (nv <- params("-h")) yield {
   def token = splitByEqual(nv)
   new BasicHeader(token[0], token[1])
   }


def toJavaList[T](scalaList : List[T]) = java.util.Arrays.asList(scalaList.toArray:_*)


val query = params("-d").mkString("&")


class MongoClient(host:String, port:int) {
   require(host != null, "You have to provide a host name")
   private val underlying = new Mongo(host, port)
   def this() = this("127.0.0.1", 27017)
   def dropDB(name:String) = underlying.dropDatabase(name)
   def createDB(name:String) = DB(underlying.getDB(name))
   def db(name:String) = DB(underlying.getDB(name))
}

import com.mongodb._



abstract class Role { def canAccess(page: String): Boolean } class Root extends Role {
override def canAccess(page:String) = true }
class SuperAnalyst extends Role {
override def canAccess(page:String) = page != "Admin"
}
class Analyst extends Role {
override def canAccess(page:String) = false } object Role {
def apply(roleName:String) = roleName match { 
   case "root" => new Root
   case "superAnalyst" => new SuperAnalyst 
   case "analyst" => new Analyst
   }
}





import com.mongodb.{DB => MongoDB}
class DB private(val underlying: MongoDB) {
}
object DB {
  def apply(underlying: MongoDB) = new DB(underlying)
}



import com.mongodb.{DB => MongoDB}
import scala.collection.JavaConversions._

class DB private(val underlying: MongoDB) {
  private def collection(name: String) = underlying.getCollection(name)
  def readOnlyCollection(name: String) = new DBCollection(collection(name))
  def administrableCollection(name: String) = new
    DBCollection(collection(name)) with Administrable
  def updatableCollection(name: String) = new
    DBCollection(collection(name)) with Updatable
  def collectionNames =  for(name <- new
    JSetWrapper(underlying.getCollectionNames)) yield name
}
object DB {
  def apply(underlying: MongoDB) = new DB(underlying)
}



import com.mongodb.{DBCollection => MongoDBCollection }
import com.mongodb.DBObject
class DBCollection(override val underlying: MongoDBCollection)
    extends ReadOnly

trait ReadOnly {
  val underlying: MongoDBCollection
  def name = underlying getName
  def fullName = underlying getFullName
  def find(doc: DBObject) = underlying find doc
  def findOne(doc: DBObject) = underlying findOne doc
  def findOne = underlying findOne
  def getCount(doc: DBObject) = underlying getCount doc
￼￼}
trait Administrable extends ReadOnly {
  def drop: Unit = underlying drop
  def dropIndexes: Unit = underlying dropIndexes
}
trait Updatable extends ReadOnly {
  def -=(doc: DBObject): Unit = underlying remove doc
  def +=(doc: DBObject): Unit = underlying save doc
}




class DBCollection(override val underlying: MongoDBCollection)
                   extends ReadOnly

private def collection(name: String) = underlying.getCollection(name)
def readOnlyCollection(name: String) = new DBCollection(collection(name))
def administrableCollection(name: String) = new
                    DBCollection(collection(name)) with Administrable
def updatableCollection(name: String) = new
                    DBCollection(collection(name)) with Updatable





trait Memoizer extends ReadOnly {
          val history = scala.collection.mutable.Map[Int, DBObject]()
          override def findOne = {
            history.getOrElseUpdate(-1, { super.findOne })
          }
          override def findOne(doc: DBObject) = {
            history.getOrElseUpdate(doc.hashCode, { super.findOne(doc) })
} }



def readOnlyCollection(name: String) =
              new DBCollection(collection(name)) with Memoizer
          def administrableCollection(name: String) =
              new DBCollection(collection(name)) with Administrable with Memoizer
          def updatableCollection(name: String) =
              new DBCollection(collection(name)) with Updatable with Memoizer


trait LocaleAware extends ReadOnly {
  override def findOne(doc: DBObject) = {
    doc.put("locale", java.util.Locale.getDefault.getLanguage)
    super.findOne(doc)
  }
  override def find(doc: DBObject) = {
    doc.put("locale", java.util.Locale.getDefault.getLanguage)
    super.find(doc)
} }







Case classes
   val parameters/accessors/setters/equals/hash-code /tostring
   copy/apply/unapply/serialization  



case class Query(q: DBObject, option: QueryOption = NoOption) {
  def sort(sorting: DBObject) = Query(q, Sort(sorting, option))
  def skip(skip: Int) = Query(q, Skip(skip, option))
  def limit(limit: Int) = Query(q, Limit(limit, option))
}



object Person {
  def apply(firstName:String, lastName:String) = {
    new Person(firstName, lastName)
  }
  def unapply(p:Person): Option[(String, String)] =
    Some((p.firstName, p.lastName))
}



trait ReadOnly {
  val underlying: MongoDBCollection
  def name = underlying getName
  def fullName = underlying getFullName
￼  def find(query: Query): DBCursor = {
    def applyOptions(cursor:DBCursor, option: QueryOption): DBCursor = {
      option match {
        case Skip(skip, next) => applyOptions(cursor.skip(skip), next)
        case Sort(sorting, next)=> applyOptions(cursor.sort(sorting), next)
        case Limit(limit, next) => applyOptions(cursor.limit(limit), next)
        case NoOption => cursor
} }
    applyOptions(find(query.q), query.option)
  }
def find(doc: DBObject): DBCursor = underlying find doc def findOne(doc: DBObject) = underlying findOne doc
def findOne = underlying findOne
def getCount(doc: DBObject) = underlying getCount doc
}





import com.scalainaction.mongo._
import com.mongodb.BasicDBObject
def client = new MongoClient
def db = client.db("mydb")
val col = db.readOnlyCollection("test")
val updatableCol = db.updatableCollection("test")
for(i <- 1 to 100) updatableCol += new BasicDBObject("i", i)
val rangeQuery = new BasicDBObject("i", new BasicDBObject("$gt", 20))
val richQuery = Query(rangeQuery).skip(20).limit(10)
val cursor = col.find(richQuery)
while(cursor.hasNext()) {
  println(cursor.next());
}













